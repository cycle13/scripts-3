outfile: "maxima.out"; with_stdout(outfile); file_output_append: true;

/*$dx: d_x$*/
/*$fE: \varphi_{E}$*/
/*$fW: \varphi_{W}$*/
/*$fWW: \varphi_{WW}$*/
/*$fP: \varphi_{P}$*/
/*$fA: \varphi_{A}$*/
/*$fB: \varphi_{B}$*/
/*$g: \Gamma$*/
/*$r: \rho$*/

                                        outfile: "maxima.out" $
/*declare(r, constant, u, constant, g, constant, fA, constant, fB, constant) $*/
declare(r, constant, u, constant, g, constant) $
declare(dx, constant) $
assume(u>0) $

boundary: "east" $
/*boundary: "first_west" $*/
/*boundary: "second_west" $*/

fe: (6/8)*fP + (3/8)*fE - (1/8)*fW $
fw: (6/8)*fW + (3/8)*fP - (1/8)*fWW $

dfdx_e: (fE-fP)/dx $
dfdx_w: (fP-fW)/dx $

/*boundary condition*/
/*interpolate an image point fO by linear out interpolation*/
block(
[fO],
if boundary = "east" then
    (
    fO: solve(fO + fP = 2*fB, fO),
    fe: fB,
    dfdx_e: ev( (fO-fP)/dx, fO )
/*    dfdx_e: (8*fB-9*fP+fW)/(3*dx)*/
    )

elseif boundary = "first_west" then
    (
    fO: solve(fO + fP = 2*fA, fO),
    fe: ev( (6/8)*fP + (3/8)*fE - (1/8)*fO, fO ),
    fw: fA,
    dfdx_w: ev( (fP-fO)/dx, fO )
/*    dfdx_w: (9*fP-8*fA-fE)/(3*dx)*/
    )

elseif boundary = "second_west" then
    (
    fO: solve(fO + fW = 2*fA, fO),
    fw: ev( (6/8)*fW + (3/8)*fP - (1/8)*fO, fO )
    )
) $

eq: r*u*fe - r*u*fw = g*dfdx_e - g*dfdx_w $
                                        with_stdout(outfile, tex(%)) $
                                        file_output_append: true $
solu: expand( solve(eq, fP) ) $
[def1: F=r*u, def2: D=g/dx] $

ratsimp(expand( ev(solu[1], solve(def1,r), solve(def2, g)) )) $
                                        with_stdout(outfile, tex(%)) $
