#!/usr/bin/perl -w

# Description: Analyye log files to extract data
#
#       Usage: ./xxx.pl
#      Output: xxx.xxx
#
#      Author: OU Yuyuan <ouyuyuan@gmail.com>
#     Created: 2012-10-06 19:51:14 CST
# Last Change: 2013-02-25 20:39:20 CST

use strict;
use 5.010;
use Date::Calc qw( Today Delta_Days Add_Delta_Days );
use File::Basename;
use getConfig;

# def variables <<<1

my $dat_dir = get_config("data directory");
my $log_dir = "/home/ou/archive/org/log";
my $missing = -999;
my $mainname= "daily_log";

my $outyen  = "$dat_dir/yes-no.txt";
my $outjob  = "$dat_dir/jobs.txt";
my $outcdl  = "$dat_dir/$mainname.cdl";

my $nday    = Delta_Days(2012,10,1, Today());
my %days;

my $date;
my %job;
my $jobtag;
my $jobid;

my %manga;
my %so;
my %fit;

# generate dates <<<1
for (my $i=0; $i<=$nday; $i++) {
    my ($year, $month, $day) = Add_Delta_Days(2012, 10, 1, $i);
    $month = "0$month" if $month<10;
    $day   = "0$day" if $day<10;
    $days{"$year-$month-$day"} = $i+1;
}

my @dates = sort { $days{$a} <=> $days{$b} } keys %days;

# glob log files <<<1

chdir $log_dir;
for (glob 'w*.org') {
    push(@ARGV, $_) if /w\d+\.org/;
}

# check lines of logs <<<1

open OUTJOB, ">$outjob" or die "Can't open file: $!";
say OUTJOB "# date|week|begin|end|lasted|id";

while (<>) {

    # extract job-tag <<<2

    if (/^\*+\s+    # org level
        .*?
        <(\d+):(\d+)>  # job tag
        /x) {
        $jobtag = "<$1:$2>";
        $jobid  = $1*100 + $2;
    }

    # extract job time <<<2

    if (/^\s*CLOCK:\s*/) { # clock tag
        if (/^\s*CLOCK:\s*
            \[(?<jobdate>20\d\d-\d\d-\d\d)
            \s(?<week>\w{3})\s
            (?<bt>\d+:\d+)        # begin time
            .*?(?<et>\d+:\d+)     # end time
            .*?(?<lt>\d+:\d+)\s*$ # lasted time
            /x) {
            my $jobkey_beg = "$+{jobdate} $+{bt}";
            my $jobkey_end = "$+{jobdate} $+{et}";
            $job{$jobkey_beg} = $jobid;
            $job{$jobkey_end} = $jobid;

            printf OUTJOB "%-s %s %6s %6s %6s %-15s\n", $+{jobdate}, $+{week},
                $+{bt}, $+{et}, $+{lt}, $jobtag;
        } else { 
            die "some thing wrong in clock in $_\n"; 
        }
    }

    # get date info <<<2

    # dates and total days since 2012-10-01
    if (/
        ^\*\s+                        # mark of top layer of org-mode
        <(20\d{2}-\d{2}-\d{2})        # date of log
        /x) {
        $date = $1;
    }

    # yes or no activity <<<2

    if (/
        ^\s*<
        (?<manga>\d),
        (?<doeso>\d),
        (?<fit>\d)
        >\s*$
        /x) {
        $manga{$date}     = $+{manga};
        $so{$date} = $+{doeso};
        $fit{$date}   = $+{fit};
    }
}
close OUTJOB;

# write yes or no file <<<1

open OUTYEN, ">$outyen" or die "Can't open file: $!";
say OUTYEN "# yyyy-mm-dd|manga|doesotrue|fitness";

my $len = length($dates[0]) + 2;
for (@dates) {
    printf OUTYEN "%-${len}s %2d %2d %2d\n", $_,
        $manga{$_}//$missing, $so{$_}//$missing, $fit{$_}//$missing;
}
close OUTYEN;

# write CDL file <<<1

my $main = (split(/./,$outcdl))[0];
open OUTCDL, ">$outcdl" or die "Can't open file: $!";
say OUTCDL "
netcdf $mainname {

dimensions:
    hour = 24, min = 60, day = unlimited;

variables:
    int manga(day);
        manga:long_name = \"Reading Manga\";
        manga:_FillValue = $missing;

    int so(day);
        so:long_name = \"Doesotrue\";
        so:_FillValue = $missing;

    int fit(day);
        fit:long_name = \"Fitness\";
        fit:_FillValue = $missing;

    int job(day, hour, min);
        job:long_name = \"job per minute\";
        job:_FillValue = $missing;

    :source = \"generated by: " . basename($0) . "\";

data:
    manga = " . &data_string(\%manga) . "
    so = "    . &data_string(\%so)    . "
    fit = "   . &data_string(\%fit)   . "
    job = "   . &jobs_string()        . "
}";
close(OUTCDL);

# subroutines <<<1

# data to string <<<2

sub data_string {
    my $ref = shift;
    my $string;
    for (my $i=0; $i<=$nday; $i++) {
        my $suf = ",";
        $suf = ";" if $i==$nday;
        $string .= "\n" if $i % 10 == 0;
        $string .= $ref->{$dates[$i]}//$missing;
        $string .= $suf;
    }
    $string;
}

# jobs string <<<2

# return assignment string in CDL syntax
sub jobs_string {
    my $string;
    my $hold=0;
    my $hold_value;
    my $value;

    # per day
    for (my $i=0; $i<=$nday; $i++) {
        my $day = $dates[$i];

        # per hour
        for (my $j=0; $j<24; $j++) {
            my $hour = ($j<10) ? "0$j" : "$j";

            # per minute
            for (my $k=0; $k<60; $k ++) {
                my $min = ($k<10) ? "0$k" : "$k";
                my $jobkey = "$day $hour:$min";
                if ($job{$jobkey}) {
                    $value = $job{$jobkey};
                    $hold  = $hold ? 0 : 1;
                    $hold_value = $value;
                } else {
                    $value = $hold ? $hold_value : $missing;
                }
                $string .= "\n" if $k % 10 == 0;
                $string .= $value;
                my $suf = ",";
                # last data in assignment
                $suf = ";" if $i==$nday && $j==23 && $k==59;
                $string .= $suf;
            }

            $string .= "\n";
        }

        $string .= "\n";
    }
    $string;
}
